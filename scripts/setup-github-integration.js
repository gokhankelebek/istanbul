#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');

console.log('üîß GitHub Integration Setup for Istanbul Mediterranean Blog');
console.log('==========================================\n');

async function setupGitHubIntegration() {
  try {
    // Check if we're in a git repository
    const gitExists = await fs.access('.git').then(() => true).catch(() => false);
    if (!gitExists) {
      console.log('‚ùå This is not a git repository. Please run this script from the project root.');
      process.exit(1);
    }

    // Get remote URL
    const { spawn } = require('child_process');
    const gitRemote = spawn('git', ['remote', 'get-url', 'origin']);
    
    let remoteUrl = '';
    gitRemote.stdout.on('data', (data) => {
      remoteUrl += data.toString();
    });

    gitRemote.on('close', (code) => {
      if (code === 0) {
        remoteUrl = remoteUrl.trim();
        console.log(`üìç Git repository: ${remoteUrl}`);
        
        // Extract owner/repo from URL
        let repoInfo = '';
        if (remoteUrl.includes('github.com')) {
          const match = remoteUrl.match(/github\.com[\/:]([^\/]+)\/([^\/]+)(?:\.git)?$/);
          if (match) {
            repoInfo = `${match[1]}/${match[2]}`;
            console.log(`üè† Repository: ${repoInfo}\n`);
          }
        }

        console.log('üìã To set up GitHub integration for your team:');
        console.log('==========================================\n');

        console.log('1. üîë Create a GitHub Personal Access Token:');
        console.log('   ‚Ä¢ Go to: https://github.com/settings/tokens');
        console.log('   ‚Ä¢ Click "Generate new token" ‚Üí "Generate new token (classic)"');
        console.log('   ‚Ä¢ Name: "Istanbul Blog Editor"');
        console.log('   ‚Ä¢ Expiration: 1 year (or as needed)');
        console.log('   ‚Ä¢ Scopes: Check "repo" (Full control of private repositories)');
        console.log('   ‚Ä¢ Click "Generate token"');
        console.log('   ‚Ä¢ ‚ö†Ô∏è  COPY THE TOKEN IMMEDIATELY (it won\'t be shown again)\n');

        console.log('2. üìù Update BlogEditor.jsx:');
        console.log(`   ‚Ä¢ Open: src/pages/BlogEditor.jsx`);
        console.log(`   ‚Ä¢ Find line: 'YOUR_USERNAME/istanbul'`);
        console.log(`   ‚Ä¢ Replace with: '${repoInfo || 'your-username/your-repo'}'`);
        console.log('   ‚Ä¢ Save the file\n');

        console.log('3. üåê Share with your team:');
        console.log('   ‚Ä¢ URL: https://yourdomain.com/admin/blog-editor');
        console.log('   ‚Ä¢ They need the GitHub token from step 1');
        console.log('   ‚Ä¢ Token is stored securely in their browser only\n');

        console.log('4. üîí Security Notes:');
        console.log('   ‚Ä¢ Tokens are stored locally in each team member\'s browser');
        console.log('   ‚Ä¢ No tokens are sent to your server');
        console.log('   ‚Ä¢ Team members need GitHub write access to the repo');
        console.log('   ‚Ä¢ Consider creating a dedicated GitHub user for blog posts\n');

        console.log('5. üöÄ Workflow:');
        console.log('   ‚Ä¢ Team visits /admin/blog-editor');
        console.log('   ‚Ä¢ Enters GitHub token (one time)');
        console.log('   ‚Ä¢ Creates blog posts through web interface');
        console.log('   ‚Ä¢ Posts are committed directly to GitHub');
        console.log('   ‚Ä¢ Website rebuilds automatically (if auto-deploy is set up)\n');

        console.log('‚úÖ Setup complete! Your team can now create blog posts remotely.');
        
      } else {
        console.log('‚ùå Could not get git remote URL. Make sure you\'re in a git repository.');
      }
    });

  } catch (error) {
    console.error('‚ùå Error during setup:', error.message);
    process.exit(1);
  }
}

setupGitHubIntegration();